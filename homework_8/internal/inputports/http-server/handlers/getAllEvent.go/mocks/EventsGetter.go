// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	queries "github.com/andrei1998Front/go_course/homework_8/internal/app/event/queries"
	mock "github.com/stretchr/testify/mock"
)

// EventsGetter is an autogenerated mock type for the EventsGetter type
type EventsGetter struct {
	mock.Mock
}

// Handle provides a mock function with given fields:
func (_m *EventsGetter) Handle() ([]*queries.GetAllEventResponce, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 []*queries.GetAllEventResponce
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*queries.GetAllEventResponce, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*queries.GetAllEventResponce); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*queries.GetAllEventResponce)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventsGetter creates a new instance of EventsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsGetter {
	mock := &EventsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
