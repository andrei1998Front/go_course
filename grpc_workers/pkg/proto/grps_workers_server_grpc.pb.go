// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc2
// source: grps_workers_server.proto

package grpc_workers_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkersServiceClient is the client API for WorkersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkersServiceClient interface {
	GetEployeeFullInfo(ctx context.Context, in *EmployeeJobGetByEmployeeName, opts ...grpc.CallOption) (*EmployeeFullInfoList, error)
}

type workersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkersServiceClient(cc grpc.ClientConnInterface) WorkersServiceClient {
	return &workersServiceClient{cc}
}

func (c *workersServiceClient) GetEployeeFullInfo(ctx context.Context, in *EmployeeJobGetByEmployeeName, opts ...grpc.CallOption) (*EmployeeFullInfoList, error) {
	out := new(EmployeeFullInfoList)
	err := c.cc.Invoke(ctx, "/grpc_workers_server.WorkersService/GetEployeeFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkersServiceServer is the server API for WorkersService service.
// All implementations must embed UnimplementedWorkersServiceServer
// for forward compatibility
type WorkersServiceServer interface {
	GetEployeeFullInfo(context.Context, *EmployeeJobGetByEmployeeName) (*EmployeeFullInfoList, error)
	mustEmbedUnimplementedWorkersServiceServer()
}

// UnimplementedWorkersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkersServiceServer struct {
}

func (UnimplementedWorkersServiceServer) GetEployeeFullInfo(context.Context, *EmployeeJobGetByEmployeeName) (*EmployeeFullInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEployeeFullInfo not implemented")
}
func (UnimplementedWorkersServiceServer) mustEmbedUnimplementedWorkersServiceServer() {}

// UnsafeWorkersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkersServiceServer will
// result in compilation errors.
type UnsafeWorkersServiceServer interface {
	mustEmbedUnimplementedWorkersServiceServer()
}

func RegisterWorkersServiceServer(s grpc.ServiceRegistrar, srv WorkersServiceServer) {
	s.RegisterService(&WorkersService_ServiceDesc, srv)
}

func _WorkersService_GetEployeeFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeJobGetByEmployeeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).GetEployeeFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_workers_server.WorkersService/GetEployeeFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).GetEployeeFullInfo(ctx, req.(*EmployeeJobGetByEmployeeName))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkersService_ServiceDesc is the grpc.ServiceDesc for WorkersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_workers_server.WorkersService",
	HandlerType: (*WorkersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEployeeFullInfo",
			Handler:    _WorkersService_GetEployeeFullInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grps_workers_server.proto",
}
